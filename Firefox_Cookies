import sqlite3
import os
import re
import argparse

class Parser:
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Program to view history/cookies on firefox")
		self.args.add_argument("--location", help="The location of firefox", type=self.validate_directory)
		self.args.add_argument("--type", help="Type you want. cookie, history", type=self.validate_type)

		self.args_parsed = self.args.parse_args()

	def return_directory(self):
		return self.args_parsed.location

	def return_type(self):
		return self.args_parsed.type

	def validate_directory(self, directory):
		if not os.path.exists(directory):
			print("\n[!] Invalid directory")
			exit()
		return directory

	def validate_type(self, user_type):
		valid_types = ["cookie", "history"]

		if not user_type in valid_types:
			print("[!] Invalid type")
			exit()
		return user_type

def printCookies(cookiesDB):
	try:
		conn = sqlite3.connect(cookiesDB)
		c = conn.cursor()
		c.execute("SELECT host, name, value FROM moz_cookies")
		print("\n[*] -- Found Cookies --")

		for row in c.fetchall():
			host = str(row[0])
			name = str(row[1])
			value = str(row[2])
			print(f"Host: {host} Cookie: {name} Value: {value}")
	except Exception as e:
		if 'encrypted' in str(e):
			print("\n[*] Error reading your cookies database.")
			print("[*] Upgrade your libary")
			exit()

def printHistory(placesDB):
	try:
		conn = sqlite3.connect(placesDB)
		c = conn.cursor()
		c.execute("SELECT url, datetime(visit_date/1000000, 'unixepoch') FROM moz_places, moz_historyvisits WHERE visit_count > 0 AND moz_places.id==moz_historyvisits.place_id;")
		print("\n[*] -- Found History -- ")

		for row in c.fetchall():
			url = str(row[0])
			date = str(row[1])
			print(f"[+] {date} - Visited: {url}")
	except Exception as e:
		print(e)
		if 'encrypted' in str(e):
			print("\n[*] Error reading your places database")
			exit()


def printGoogle(placesDB):
	conn = sqlite3.connect(placesDB)
	c = conn.cursor()
	c.execute("SELECT url, datetime(visit_date/1000000, 'unixepoch') FROM moz_places, moz_historyvisits WHERE visit_count > 0 AND moz_places.id==moz_historyvisits.place_id;")
	print("\n[*] -- Found Google -- ")

	for row in c.fetchall():
		url = str(row[0])
		date = str(row[1])
		if "google" in url.lower():
			r = re.findall(r"q=.*\&", url)

			if r:
				search = r[0].split("&")[0]
				search = search.replace("q=", "").replace("+", "")

				print(f"[+] {date} - Searched For: {search}")


if __name__ == '__main__':
	
	get_directory = Parser().return_directory()
	get_type = Parser().return_type()
	os.chdir(get_directory)

	firefox_database = {"cookie": "cookies.sqlite", "history": "places.sqlite"}

	sqlite_type = firefox_database.get(get_type)

	full_location = os.path.join(get_directory, sqlite_type)

	
	if sqlite_type == "cookies.sqlite":
		printCookies(full_location)

	elif sqlite_type == "places.sqlite":
		printHistory(full_location)
		printGoogle(full_location)

	else:
		print("[!] Not found.")
		exit()
	
